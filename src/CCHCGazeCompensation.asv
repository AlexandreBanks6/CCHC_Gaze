%{
Author: Alexandre Banks Gadbois
Paper: https://pubmed.ncbi.nlm.nih.gov/38888820/
Description: Uses Corner-Contingent Head Compensation (CCHC) calibration
parameters to estimate Point of Gaze (POG) on new data. Requires that
"CCHCCalibration.m" has been run first to generate the calibration model
which is stored in "CCHC_Calibration.mat".
Make sure to run EyeCornerDetector.py on the data that calibration hasn't
been run on (the data to estimate POG on). Do this by setting "IS_ON_CALIB" 
to False in the EyeCornerDetector.py header.
%}

clear
clc
close all

%% Data Directory Definition
%Change the directory if needed
data_root='../../GazeData/'; %The overall data directory

MERGED_CSV_HEADER = {'timestamp', 'framecount', 'pupil_right_x', 'pupil_right_y', 'pupil_right_width', ...
                'pupil_right_height', 'pupil_right_angle', 'pupil_found_right', 'glint0_right_x', ...
                'glint0_right_y', 'glint1_right_x', 'glint1_right_y', 'glint2_right_x', 'glint2_right_y', ...
                'pupil_left_x', 'pupil_left_y', 'pupil_left_width', 'pupil_left_height', 'pupil_left_angle', ...
                'pupil_found_left', 'glint0_left_x', 'glint0_left_y', 'glint1_left_x', 'glint1_left_y', ...
                'glint2_left_x', 'glint2_left_y', 'calib_x', 'calib_y', 'calib_valid', 'right_inner_x', ...
                'right_inner_y', 'right_outer_x', 'right_outer_y', 'left_inner_x', 'left_inner_y', ...
                'left_outer_x', 'left_outer_y'};

%% Estimating POG
folder_list=dir(data_root);
dirnames={folder_list([folder_list.isdir]).name};
dirnames = dirnames(~ismember(dirnames, {'.', '..'})); % Remove '.' (current) and '..' (parent) directories from list
num_dir = length(dirnames);

for m=[1:num_dir] %Looping for all directories of data to estimate
    
    current_dir=fullfile(data_root,dirnames{m});

    %--------------------<Loading Data>-----------------
    % Load the previously saved calibration parameters
    calib_file = fullfile(current_dir,'calibration', 'CCHC_Calibration.mat');
    if ~exist(calib_file, 'file')
        disp(['!!!!Do not have calibration file for: ', dirnames{m}, '; cannot run estimation!!!!']);
        continue;
    end
    
    load(calib_file, 'model_poly', 'dist_cell', 'avg_corners','mdl_right_x','mdl_right_y', 'mdl_left_x', 'mdl_left_y');
    
    gazelog_files=dir(fullfile(current_dir,'gazelog_*.txt')); %Gets all gazelog files in this subdirectory
    %Check that we have gazelog files
    if isempty(gazelog_files)
        disp(['!!!!No gazelog files in: ',current_dir,' cannot run estimation!!!!']);
        continue;
    end


    %Looping through gazelog files, merge with eyecorner data file, and
    %estimate compensated POG
    for j=[1:length(gazelog_files)]
        gazelog_filename = gazelog_files(j).name;
        % Extract timestamp from gazelog filename to find corresponding eyeCornerData file
        timestamp_str = extractBetween(gazelog_filename, 'gazelog_', '.txt');
        timestamp_str = timestamp_str{1};

        % Construct expected eyeCornerData filename
        eyecorner_filename = ['eyeCornerData_', timestamp_str, '.csv'];
        eyecorner_filepath = fullfile(current_dir, eyecorner_filename);
        
        %Read gazelog data
        gazelog_filepath = fullfile(current_dir, gazelog_filename);
        gazelog_data = readmatrix(gazelog_filepath);

        %Read eyeCornerData
        eyecorner_data = readmatrix(eyecorner_filepath);
        
        %------------<Merging Data>------------
        % Get framecount from gazelog (column 3) and Frame_No from eyeCornerData (column 1)
        gazelog_frames=gazelog_data(:, 3); % framecount column
        eyecorner_frames=eyecorner_data(:, 1); % Frame_No column

        % Find matching frames
        [common_frames, gazelog_idx, eyecorner_idx] = intersect(gazelog_frames, eyecorner_frames,'stable');
        if isempty(common_frames)
            disp(['!!!No matching frames found between: ', gazelog_filename, ' and ', eyecorner_filename,' cannot run POG estimation on these.']);
            merged_files{j} = [];
            continue;
        end

        % Extract relevant columns from gazelog data (matched rows only)
        gazelog_matched=gazelog_data(gazelog_idx, :);
        gazelog_matched=gazelog_matched(:, [1, 3, 13:24,34:48]); % timestamp, framecount, pupil/glint data, calib data
        
        %Extract matched eye corners and get correct order of columns as
        %expected in merged data
        eyecorner_matched=eyecorner_data(eyecorner_idx,:);
         % Original: 'Right_Inner_x', 'Right_Inner_y', 'Right_Outer_x', 'Right_Outer_y', 'Left_Outer_x', 'Left_Outer_y', 'Left_Inner_x', 'Left_Inner_y'
        % Desired: right_inner_x, right_inner_y, right_outer_x, right_outer_y, left_inner_x, left_inner_y, left_outer_x, left_outer_y
        eyecorner_matched=eyecorner_matched(:,[2:5,8:9,6:7]);
        
         %Combine two gazelog and eye corner data
        % Combine gazelog and eyeCornerData
        merged_data = [gazelog_matched, eyecorner_matched];
        %Create the merged filename
        % Create merged filename
        merged_filename = ['mergedData_', timestamp_str, '.csv'];
        merged_filepath = fullfile(current_dir, merged_filename);
        
        % Write merged data to CSV with header
        merged_table = array2table(merged_data, 'VariableNames', MERGED_CSV_HEADER);
        writetable(merged_table, merged_filepath);
        
        %------------<Estimating POG>----------
        pog_estimates = estimateCCHCPOG(merged_data, model_poly, dist_cell, avg_corners,mdl_right_x, mdl_right_y, mdl_left_x, mdl_left_y);


    end


end